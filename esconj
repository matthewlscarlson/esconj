#!/bin/bash
# Title       : esconj
# Description : Conjugates Spanish verbs in the terminal.
# Author	  : Matthew Carlson <matt@mcarlson.xyz>
# Date        : 2020-09-03
# Version     : 0.1
# Usage		  : esconj [options]
# Notes       : Should handle common verbs. No guarantees for obscure verbs.

#    Copyright (C) 2020 Matthew Carlson <matt@mcarlson.xyz>
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

NL='
'
# file from https://github.com/ghidinelli/fred-jehle-spanish-verbs
VERBS='/usr/share/esconj/verbs.csv'
WORDS="$(cat ${VERBS})"

check() {
    verb="$(printf '%s\n' "${1}" | tr '[:upper:]' '[:lower:]')"

    # check if valid spanish verb
    if ! printf '%s\n' "${verb}" | grep -q '^[a-z]*\(ar\|er\|ir\)\{1\}\(se\)\?$'; then
        printf '%s\n' "Verb is in incorrect format.${NL}Verb must be a word ending in -ar, -er, -ir (with -se in the case of reflexives)."
        exit 1
    fi

    # handle suffixes
    suffix="${verb#"${verb%??}"}"
    case "${suffix}" in
        # -se means reflexive
        se)
            # check if reflexive version of verb exists
            if search_dict "${verb}"; then
                conjugate "${verb}"
            # if not, check without -se
            else
                check "${verb%??}"
            fi
            ;;
        # standard -ar, -er, -ir
        ar|er|ir)
            search_dict "${verb}"
            conjugate "${verb}"
            ;;
    esac
}

conjugate() {
    # declare arrays which will store conjugation table info
    declare -A conjugations
    declare -a tenses

    # get all rows containing verb
    rows="$(awk -v verb="${1}" -F '","|^"|"$' '{sub("^\"","")} $1==verb' "${VERBS}")"

    # store info in arrays
    for i in 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18; do
        tenses[${i}]=$(for j in 5 8 9 10 11 12 13; do
        conjugations[${i},${j}]="$(printf '%s\n' "${rows}" | awk -v col=${j} -F '","|^"|"$' '{print $col}' | head -${i} | tail +${i})"
        [ -n "${conjugations[${i},${j}]}" ] && printf '%s\n' "${conjugations[${i},${j}]}" || printf '%s\n' '-'
        done)
    done

    print_mood_or_aspect 'Indicativo'
    print_tenses 1 5

    print_mood_or_aspect 'Subjuntivo'
    print_tenses 11 3

    print_mood_or_aspect 'Aspecto Perfectivo'
    print_tenses 6 5

    print_mood_or_aspect 'Aspecto Perfectivo de Subjuntivo'
    print_tenses 14 3

    print_mood_or_aspect 'Imperativo (Afirmativo y Negativo)'
    print_tenses 17 2
}

print_tenses() {
    tmp=''

    # print tenses in neat columns
    for i in "${tenses[@]:${1}:${2}}"; do
        tmp=$(paste <(printf '%b\n' "${tmp}") <(printf '%s\n' "${i}") | column -s $'\t' -t)
    done

    # print pronouns
    paste <(printf '\e[1;32m%s\e[m\n' ''                  \
                                      'yo'                \
                                      'tu'                \
                                      'Ã©l/ella/Ud.'       \
                                      'nosotros'          \
                                      'vosotros'          \
                                      'ellos/ellas/Uds.') \
    <(printf '%b\n' "${tmp}") | column -s $'\t' -t

    printf '\n'
}

print_mood_or_aspect() { printf '\e[1;32m%s\n' "${1}" ; }

search_dict() {
    # grep csv for verb
    # NOTE: also excludes the word 'er'
    if ! printf '%s\n' "${WORDS}" | grep -w "${1}" | grep -qvw 'er'; then
        printf '%s\n' "Verb not found.${NL}If you entered a reflexive verb, try it without the -se ending."
        exit 1
    else
        return 0
    fi
}

usage() {
    printf '%s\n' "Usage: esconj [options]"
    printf '%s\n' "Options:
    -c, --conjugate  Conjugate verb
    -h, --help       Print this message and exit"
}

main() {
    [ ${#} -eq 0 ] && usage

    for arg in "${@}"; do
        # check for dashed argument
        [ "${arg%"${arg#?}"}" = '-' ] || continue

        case "${1}" in
            -c|--conjugate)
                check "${2}"
                shift 2
                ;;
            -h|--help)
                usage
                break
                ;;
            *)
                printf '%s\n' "Invalid argument: ${1}"
                usage
                break
                ;;
        esac
    done
}

main "${@}"
